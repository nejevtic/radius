ldap {
  server = 'ldap://{{ ansible_fqdn }}'
  base_dn = 'cn=accounts,{{ radius_ldap_domain }}'
  sasl {
    mech = 'GSSAPI'
    realm = '{{ ipaclient_realm }}'
  }
  update {
    control:NT-Password := 'ipaNTHash'
    control:Password-With-Header += 'userPassword'
    control: += 'radiusControlAttribute'
    request: += 'radiusRequestAttribute'
    reply: += 'radiusReplyAttribute'
  }
  user {
    base_dn = "${..base_dn}"
    filter = "{% raw %}(uid=%{%{Stripped-User-Name}:-%{User-Name}}){% endraw %}"
    sasl {
      mech = 'GSSAPI'
      realm = '{{ ipaclient_realm }}'
    }
  }
  group {
    base_dn = "${..base_dn}"
    filter = '(objectClass=posixGroup)'
    membership_attribute = 'memberOf'
  }
  profile {
  }
  client {
    base_dn = "${..base_dn}"
    filter = '(objectClass=radiusClient)'
    template {
    }
    attribute {
      ipaddr        = 'radiusClientIdentifier'
      secret        = 'radiusClientSecret'
    }
  }
  accounting {
    reference = "{% raw %}%{tolower:type.%{Acct-Status-Type}}{% endraw %}"
    type {
      start {
        update {
          description := "Online at %S"
        }
      }
      interim-update {
        update {
          description := "Last seen at %S"
        }
      }
      stop {
        update {
          description := "Offline at %S"
        }
      }
    }
  }
  post-auth {
    update {
      description := "Authenticated at %S"
    }
  }
  options {
    chase_referrals = yes
    rebind = yes
    res_timeout = 10
    srv_timelimit = 3
    net_timeout = 1
    idle = 60
    probes = 3
    interval = 3
    ldap_debug = 0x0028
  }
  tls {
  }
  pool {
    start = ${thread[pool].start_servers}
    min = ${thread[pool].min_spare_servers}
    max = ${thread[pool].max_servers}
    spare = ${thread[pool].max_spare_servers}
    uses = 0
    retry_delay = 30
    lifetime = 0
    idle_timeout = 60
  }
}
